<!--
  ~ Copyright 2024 XIN LIN HOU<hxl49508@gmail.com>
  ~ plugin.xml is part of Cool Request
  ~
  ~ License: GPL-3.0+
  ~
  ~ Cool Request is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ Cool Request is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with Cool Request.  If not, see <http://www.gnu.org/licenses/>.
  -->

<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin require-restart="true">
    <id>com.hxl.plugin.cool-request</id>
    <name>Cool Request</name>

    <vendor email="2606710413@qq.com" url="https://coolrequest.dev">HouXinLin</vendor>
    <version>2024.5.1</version>
    <idea-version since-build="203"/>
    <description><![CDATA[
        <div>
             <span> <a href="https://coolrequest.dev">Help</a></span>
        </div>
        <h1>Cool Request</h1>
        <p>API Request Tool</p>

        <p>It is used to solve the call of the Controller method and the regular timer method. It is very convenient.</p>

        <h1>Main Features</h1>
            <p>1. It can bypass the interceptor. If your project uses spring boot security, it can ignore the spring boot security authentication, and you don’t need to configure anything.</p>
            <p>2. It supports pre- and post-scripts and is written in Java. It can call any third-party library and the project's own class.</p>

        <h1>主要功能</h1>
            <p>1. 它可以绕过拦截器，如果你的项目使用了spring boot security，他可以无视spring boot security的认证，并且你不需要配置什么</p>
            <p>2. 它支持前后置脚本，并且使用java编写，可以调用任意第三方库，和项目自身的class</p>

        <h1>Features</h1>
        <ol>
          <li>✓ Show all api information defined in Spring Boot, supporting HTTP/Reflection call</li>
          <li>✓ Display timers defined in Spring Boot, manually trigger without waiting for the specified time</li>
          <li>✓ Bypass interceptors during requests</li>
          <li>✓ Specify proxy/original objects during requests</li>
          <li>✓ One-click export to openapi format</li>
          <li>✓ One-click import to apifox/apipost</li>
          <li>✓ Copy request as curl</li>
          <li>✓ Compatible with gradle, maven multi-module projects</li>
          <li>✓ Compatible with Java/Kotlin languages</li>
          <li>✓ Powerful HTTP request parameter guessing, reducing developers' time to fill in keys</li>
          <li>✓ Use Java syntax to handle pre/post request scripts</li>
          <li>✓ Save response results to files</li>
          <li>✓ Quickly preview json, xml, img, html, text responses</li>
          <li>✓ Multiple layout switching</li>
        </ol>

        <h2>Steps for usage:</h2>
        <ol>
          <li>Install it</li>
          <li>Select Cool Request in View → Tool Window</li>
          <li>Restart your idea</li>
        </ol>


        <div>
             <span> <a href="https://coolrequest.dev">官方文档</a></span>
        </div>
        <h1>Cool Request</h1>
        <p>API请求工具</p>
        <p>他用来解决api的调用,以及调度器方法的触发,非常方便.</p>
        <h1>特性</h1>
        <ol>
          <li>✓ 显示在Spring Boot中定义的所有API信息，支持 HTTP/反射 调用</li>
          <li>✓ 显示在Spring Boot中定义的定时器,在不等待指定时间的情况下手动触发</li>
          <li>✓ 在请求期间绕过拦截器</li>
          <li>✓ 在请求期间指定代理/原始对象</li>
          <li>✓ 一键导出为OpenAPI格式</li>
          <li>✓ 一键导入到ApiFox、ApiPost</li>
          <li>✓ 将请求复制为cURL</li>
          <li>✓ 兼容Gradle、Maven多模块项目</li>
          <li>✓ 兼容Java/Kotlin语言</li>
          <li>✓ 强大的HTTP请求参数猜测功能,减少开发人员填写参数的时间</li>
          <li>✓ 使用Java语言编写请求前/后脚本</li>
          <li>✓ 快速将响应结果保存到文件中</li>
          <li>✓ 快速预览JSON、XML、图像、HTML、文本响应</li>
          <li>✓ 多种布局切换</li>
        </ol>
        <h2>使用方法:</h2>
        <ol>
          <li>点击Install</li>
          <li>选择 Cool Request,他位于 View → Tool Window</li>
          <li>重新启动您的idea</li>
        </ol>
  ]]></description>

    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.properties</depends>
    <depends>org.jetbrains.plugins.yaml</depends>
    <depends>com.intellij.modules.platform</depends>

    <applicationListeners>
    </applicationListeners>

    <projectListeners>
        <listener class="com.cool.request.idea.listener.CoolRequestProjectManagerListener"
                  topic="com.intellij.openapi.project.ProjectManagerListener"/>;
    </projectListeners>
    <extensions defaultExtensionNs="com.intellij">
        <postStartupActivity
                implementation="com.cool.request.idea.listener.CoolRequestStartupActivity"></postStartupActivity>
        <errorHandler implementation="com.cool.request.idea.error.ErrorReporter"/>

        <fileEditorProvider implementation="com.cool.request.view.editor.HttpFileEditorProvider"/>
        <toolWindow id="Cool Request" secondary="true" icon="/icons/pluginIcon.svg" anchor="right"
                    factoryClass="com.cool.request.view.tool.CoolRequestToolWindowFactory"/>
        <java.programPatcher implementation="com.cool.request.view.tool.ProjectJavaProgramPatcher"/>
        <applicationService
                serviceInterface="com.cool.request.components.staticServer.StaticResourceServerService"
                serviceImplementation="com.cool.request.components.staticServer.StaticResourceServerServiceImpl"/>

        <applicationService
                serviceInterface="com.cool.request.common.cache.CacheStorageService"
                serviceImplementation="com.cool.request.common.cache.CacheStorageServiceImpl"/>
        <notificationGroup
                id="CoolRequestNotificationGroup"
                displayType="BALLOON"
                toolWindowId="TODO"
        />
        <searchEverywhereContributor
                implementation="com.cool.request.view.tool.search.ApiSearchEverywhereContributor"/>
        <codeInsight.lineMarkerProvider
                implementationClass="com.cool.request.action.nav.RestRequestLineMarkerProvider"
                language="JAVA"/>

    </extensions>

    <actions>
        <action id="com.cool.request.HotkeyAction" class="com.cool.request.action.actions.SearchKeyAction"
                text="HotkeyAction"/>

        <group text="Cool Request" id="com.cool.request.coolrequest.menu.main" popup="true">
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
            <action id="CoolRequestAddTrace"
                    class="com.cool.request.agent.trace.AddTraceAnAction" text="Add/Cancel Method To Trace"
                    description="Add/Cancel Method To Trace">
            </action>
        </group>
    </actions>

    <projectListeners>

    </projectListeners>

</idea-plugin>